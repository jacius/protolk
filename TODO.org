This document lays out the tentative development plan for Protolk.
It will be updated as development progresses and the plan evolves.


* Milestone 1: Primitive API

- [X] =pob= record type
- [X] =%make-pob= procedure
- [X] =pob?= procedure
- [X] =%pob-props= / =%pob-set-props!= procedures
- [X] =%pob-methods= / =%pob-set-methods!= procedures

Props:
- [X] =%has-prop?= procedure
- [X] =%prop= procedure
- [X] =%set-prop!= procedure
- [X] =%unset-prop!= procedure

Methods:
- [X] =%has-method?= procedure
- [X] =%method= procedure
- [X] =%set-method!= procedure
- [X] =%unset-method!= procedure

* Milestone 2: Core API and stdpob

- [X] =make-pob= procedure (with keyword args)
- [X] =send= procedure
- [X] =prop-reader= procedure factory
- [X] =prop-writer= procedure factory

=stdpob= predefined pob:
- [X] =[stdpob derive #!key props methods]=
- [X] =[stdpob ancestors]=
- [X] =[stdpob has-ancestor?]=
- [X] =[stdpob _resolve-prop name #!optional default]=
- [X] =[stdpob _resolve-method name #!optional default]=
- [X] =[stdpob _method-missing name args]=
- [X] =[stdpob _receive message args]=
- [X] =[stdpob responds-to? message #!optional args]=
- [X] =[stdpob _display port]=

Make stdpob methods available as procedures, e.g. =stdpob-derive=,
=stdpob-_resolve-prop=.

Misc:
- [X] pob record printer invokes =_display= method
- [X] Egg install
  - [X] setup file
  - [X] meta file
  - [X] tests/run.scm
  - [X] documentation page

* Milestone 3: Simplification

The API of Milestone 2 is overly flexible, and the internals overly
complex. The goal of this milestone is to simplify the system,
focusing on realistic use cases and /useful/ flexibility, not
flexibility for its own sake.

- [X] Prototypal inheritance is a fundamental characteristic of pobs,
  so the =base= should be stored as a slot in the pob, rather than as
  a prop.

- [ ] The abilities to resolve props and methods are inherent to all
  pobs, so these procedures should be stored as slots in the pob,
  /required/ in every pob. These methods should be copied from the
  base pob when the pob is derived.

* Milestone 4: Methods and Encapsulation

- [ ] =in-method= macro
- [ ] =define-method= macro
- [ ] =super= procedure

- [ ] =%self= parameter primitive
- [ ] =self= procedure (read-only interface to =%self=)
- [ ] =own-prop= procedure and setter

- [ ] =assert-self= procedure
  (raise exception unless given pob is current-self)
- [ ] =define-private-method= macro

Demos:
- [ ] Basics
  - Deriving from stdpob
  - Overriding stdpob props and methods
  - Adding custom props and methods
- [ ] Emulating classical inheritance

* Milestone 5: Syntax Sugar

- [ ] =own-prop= syntax: =@foo=
- [ ] =send= syntax: =[pob msg args...]=
- [ ] =enable-protolk-syntax= procedure
- [ ] =with-protolk-syntax= macro

- [ ] Update demos

* Milestone 6: Aliases and Multiple Inheritance

- [ ] Method aliases in stdpob. If the value of a method is a symbol
  (instead of a procedure), begin resolving that method instead,
  beginning at the pob where the alias was found.
- [ ] Multiple inheritance (multiple bases). Use a precedence list to
  determine inheritance and "super" calls.

* Milestone 7: Optimization

- [ ] Make primitive prop and method accessors work with both alists
  and hash-tables.
- [ ] Automatically convert pob prop and method alists into
  hash-tables when they reach a certain (configurable) size, for
  efficiency when a pob has a large number of props or methods.



#+STARTUP: showall
#+TODO: IN-PROGRESS | DONE
